{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin-master\\\\src\\\\components\\\\PhoneInfo.js\";\n// file: src/component/PhoneInfo.js\nimport React, { Component } from 'react';\n\nclass PhoneInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // 우리는 수정 버튼을 눌렀을 때 editing  값을 true로 설정해줄 것입니다.\n      // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\n      // input 형태로 보여주게 됩니다.\n      editing: false,\n      // input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\n      // 설정합니다.\n      name: '',\n      phone: ''\n    };\n\n    this.handleRemove = () => {\n      // 삭제 버튼이 클릭되면 onRemove에 id 넣어서 호출\n      const {\n        info,\n        onRemove\n      } = this.props;\n      onRemove(info.id);\n    };\n\n    this.handleToggleEdit = () => {\n      const {\n        editing\n      } = this.state;\n      this.setState({\n        editing: !editing\n      });\n    };\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\n    if (!this.state.editing && !nextState.editing && nextProps.info === this.props.info) {\n      return false;\n    } // 나머지 경우엔 리렌더링 함\n\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\n    // 수정을 눌렀을 땐, 기존의 값이 input에 나타나고,\n    // 수정을 적용할 땐, input 의 값들을 부모한테 전달해줍니다.\n    const {\n      info,\n      onUpdate\n    } = this.props;\n\n    if (!prevState.editing && this.state.editing) {\n      // editing 값이 false -> true 로 전환 될 때\n      // info 의 값을 state에 넣어준다\n      this.setState({\n        name: info.name,\n        phone: info.phone\n      });\n    }\n\n    if (prevState.editing && !this.state.editing) {\n      // editing 값이 true->false로 전환 될 때\n      onUpdate(info.id, {\n        name: this.state.name,\n        phone: this.state.phone\n      });\n    }\n  }\n\n  render() {\n    console.log('render PhoneInfo ' + this.props.info.id);\n    const style = {\n      border: '1px solid black',\n      padding: '8px',\n      margin: '8px'\n    };\n    const {\n      editing\n    } = this.state;\n\n    if (editing) {\n      // 수정모드\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        value: this.state.name,\n        name: \"name\",\n        placeholder: \"\\uC774\\uB984\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        value: this.state.phone,\n        name: \"phone\",\n        placeholder: \"\\uC804\\uD654\\uBC88\\uD638\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleToggleEdit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, \"\\uC801\\uC6A9\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleRemove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\"));\n    } // 일반모드\n\n\n    const {\n      name,\n      phone\n    } = this.props.info;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 22\n      }\n    }, name)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, phone), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleToggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \"\\uC218\\uC815\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"\\uC0AD\\uC81C\"));\n  }\n\n}\n\nPhoneInfo.defaultProps = {\n  info: {\n    name: '자산 명',\n    phone: '000-000-00 000',\n    id: 0\n  }\n};\nexport default PhoneInfo;","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin-master/src/components/PhoneInfo.js"],"names":["React","Component","PhoneInfo","state","editing","name","phone","handleRemove","info","onRemove","props","id","handleToggleEdit","setState","handleChange","e","value","target","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","prevState","onUpdate","render","console","log","style","border","padding","margin","defaultProps"],"mappings":"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","sourcesContent":["// file: src/component/PhoneInfo.js\r\nimport React, {Component} from 'react';\r\n\r\nclass PhoneInfo extends Component{\r\n    static defaultProps={\r\n        info: {\r\n            name: '자산 명',\r\n            phone: '000-000-00 000',\r\n            id:0\r\n        },\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n        if(!this.state.editing\r\n            && !nextState.editing\r\n            && nextProps.info === this.props.info) {\r\n                return false;\r\n            }\r\n            // 나머지 경우엔 리렌더링 함\r\n            return true;\r\n    }\r\n\r\n    state = {\r\n        // 우리는 수정 버튼을 눌렀을 때 editing  값을 true로 설정해줄 것입니다.\r\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n        // input 형태로 보여주게 됩니다.\r\n        editing: false,\r\n        // input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n        // 설정합니다.\r\n        name: '',\r\n        phone: '',\r\n    }\r\n\r\n    handleRemove = () =>{\r\n        // 삭제 버튼이 클릭되면 onRemove에 id 넣어서 호출\r\n        const {info, onRemove } = this.props;\r\n        onRemove(info.id);\r\n    }\r\n\r\n    // editing 값을 반전시키는 함수입니다\r\n    // true -> false, false -> true\r\n    handleToggleEdit = () => {\r\n        const { editing } = this.state;\r\n        this.setState({editing: !editing});\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n        // 수정을 눌렀을 땐, 기존의 값이 input에 나타나고,\r\n        // 수정을 적용할 땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n        const {info, onUpdate} = this.props;\r\n        if(!prevState.editing && this.state.editing){\r\n            // editing 값이 false -> true 로 전환 될 때\r\n            // info 의 값을 state에 넣어준다\r\n            this.setState({\r\n                name: info.name,\r\n                phone: info.phone\r\n            })\r\n        }\r\n\r\n        if (prevState.editing && !this.state.editing){\r\n            // editing 값이 true->false로 전환 될 때\r\n            onUpdate(info.id, {\r\n                name: this.state.name,\r\n                phone: this.state.phone\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log('render PhoneInfo '+ this.props.info.id)\r\n        const style={\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        };\r\n\r\n        const {editing} = this.state;\r\n\r\n        if(editing){ // 수정모드\r\n            return(\r\n                <div style={style}>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.name}\r\n                            name=\"name\"\r\n                            placeholder=\"이름\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.phone}\r\n                            name=\"phone\"\r\n                            placeholder=\"전화번호\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <button onClick={this.handleToggleEdit}>적용</button>\r\n                    <button onClick={this.handleRemove}>삭제</button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // 일반모드\r\n        const{\r\n            name, phone\r\n        } = this.props.info;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>{name}</b></div>\r\n                <div>{phone}</div>\r\n                <button onClick={this.handleToggleEdit}>수정</button>\r\n                <button onClick={this.handleRemove}>삭제</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;"]},"metadata":{},"sourceType":"module"}