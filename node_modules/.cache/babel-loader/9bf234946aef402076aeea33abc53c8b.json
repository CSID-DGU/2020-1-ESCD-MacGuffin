{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\src\\\\containers\\\\Auth\\\\Register.js\";\nimport React, { Component } from 'react';\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as authActions from 'redux/modules/auth';\nimport storage from 'lib/storage';\nimport { isEmail, isLength, isAlphanumeric } from 'validator';\nimport debounce from 'lodash/debounce';\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLocalRegister = async () => {\n      const {\n        form,\n        AuthActions,\n        error,\n        history\n      } = this.props;\n      const {\n        email,\n        username,\n        password,\n        passwordConfirm\n      } = form.toJS();\n      const {\n        validate\n      } = this;\n      if (error) return; // 현재 에러가 있는 상태라면 진행하지 않음\n\n      if (!validate['email'](email) || !validate['username'](username) || !validate['password'](password) || !validate['passwordConfirm'](passwordConfirm)) {\n        // 하나라도 실패하면 진행하지 않음\n        return;\n      }\n\n      try {\n        await AuthActions.localRegister({\n          email,\n          username,\n          password\n        });\n        const loggedInfo = this.props.result.toJS();\n        console.log(loggedInfo); // TODO: 로그인 정보 저장 (로컬스토리지/스토어)\n\n        history.push('/'); // 회원가입 성공시 홈페이지로 이동\n        // TODO: 자산관리 페이지로 이동\n      } catch (e) {\n        // 에러 처리하기\n        if (e.response.status === 401) {\n          const {\n            key\n          } = e.response.data;\n          const message = key === 'email' ? '이미 존재하는 이메일입니다.' : '이미 존재하는 아이디입니다.';\n          return this.setError(message);\n        }\n\n        this.setError('알 수 없는 에러가 발생했습니다.');\n      }\n    };\n\n    this.checkEmailExists = debounce(async email => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.checkEmailExists(email);\n\n        if (this.props.exists.get('email')) {\n          this.setError('이미 존재하는 이메일입니다.');\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }, 300);\n    this.chechUsernameExists = debounce(async username => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.chechUsernameExists(username);\n\n        if (this.props.exists.get('username')) {\n          this.setError('이미 존재하는 아이디입니다.');\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }, 300);\n    this.setError = debounce(async message => {\n      const {\n        AuthActions\n      } = this.props;\n      AuthActions.setError({\n        form: 'register',\n        message\n      });\n    }, 300);\n    this.validate = {\n      email: value => {\n        if (!isEmail(value)) {\n          this.setError('잘못된 이메일 형식 입니다.');\n          return false;\n        }\n\n        return true;\n      },\n      username: value => {\n        if (!isAlphanumeric(value) || !isLength(value, {\n          min: 4,\n          max: 15\n        })) {\n          this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\n          return false;\n        }\n\n        return true;\n      },\n      password: value => {\n        if (!isLength(value, {\n          min: 6\n        })) {\n          this.setError('비밀번호를 6자 이상 입력하세요.');\n          return false;\n        }\n\n        this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\n\n        return true;\n      },\n      passwordConfirm: value => {\n        if (this.props.form.get('password') !== value) {\n          this.setError('비밀번호확인이 일치하지 않습니다.');\n          return false;\n        }\n\n        this.setError(null);\n        return true;\n      }\n    };\n\n    this.handleChange = e => {\n      const {\n        AuthActions\n      } = this.props;\n      const {\n        name,\n        value\n      } = e.target;\n      AuthActions.changeInput({\n        name,\n        value,\n        form: 'register'\n      }); // 검증작업 진행\n\n      const validation = this.validate[name](value);\n      if (name.indexOf('password') > -1 || !validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\n      // TODO: 이메일, 아이디 중복 확인\n\n      const check = name === 'email' ? this.checkEmailExists : this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\n\n      check(value);\n    };\n  }\n\n  componentWillUnmount() {\n    const {\n      AuthActions\n    } = this.props;\n    AuthActions.initializeForm('register');\n  }\n\n  render() {\n    const {\n      error\n    } = this.props;\n    const {\n      email,\n      username,\n      password,\n      passwordConfirm\n    } = this.props.form.toJS();\n    const {\n      handleChange\n    } = this;\n    return /*#__PURE__*/React.createElement(AuthContent, {\n      title: \"\\uD68C\\uC6D0\\uAC00\\uC785\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC774\\uBA54\\uC77C\",\n      name: \"email\",\n      placeholder: \"\\uC774\\uBA54\\uC77C\",\n      value: email,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC544\\uC774\\uB514\",\n      name: \"username\",\n      placeholder: \"\\uC544\\uC774\\uB514\",\n      value: username,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      name: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      type: \"password\",\n      value: password,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      name: \"passwordConfirm\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      type: \"password\",\n      value: passwordConfirm,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }), error && /*#__PURE__*/React.createElement(AuthError, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 30\n      }\n    }, error), /*#__PURE__*/React.createElement(AuthButton, {\n      onClick: this.handleLocalRegister,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), /*#__PURE__*/React.createElement(RightAlignedLink, {\n      to: \"/auth/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, \"\\uB85C\\uADF8\\uC778\"));\n  }\n\n}\n\nexport default connect(state => ({\n  form: state.auth.getIn(['register', 'form']),\n  error: state.auth.getIn(['register', 'error']),\n  exists: state.auth.getIn(['register', 'exists']),\n  result: state.auth.get('result')\n}), dispatch => ({\n  AuthActions: bindActionCreators(authActions, dispatch)\n}))(Register);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/containers/Auth/Register.js"],"names":["React","Component","AuthContent","InputWithLabel","AuthButton","RightAlignedLink","AuthError","connect","bindActionCreators","authActions","storage","isEmail","isLength","isAlphanumeric","debounce","Register","handleLocalRegister","form","AuthActions","error","history","props","email","username","password","passwordConfirm","toJS","validate","localRegister","loggedInfo","result","console","log","push","e","response","status","key","data","message","setError","checkEmailExists","exists","get","chechUsernameExists","value","min","max","handleChange","name","target","changeInput","validation","indexOf","check","componentWillUnmount","initializeForm","render","state","auth","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as authActions from 'redux/modules/auth';\r\nimport storage from 'lib/storage';\r\nimport {isEmail, isLength, isAlphanumeric} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nclass Register extends Component {\r\n\r\n\r\n    handleLocalRegister = async() => {\r\n        const {form, AuthActions, error, history} = this.props;\r\n        const {email, username, password, passwordConfirm} =form.toJS();\r\n\r\n        const {validate} =this;\r\n\r\n        if(error) return; // 현재 에러가 있는 상태라면 진행하지 않음\r\n        if(!validate['email'](email)\r\n        || !validate['username'](username)\r\n        || !validate['password'](password)\r\n        || !validate['passwordConfirm'](passwordConfirm)){\r\n            // 하나라도 실패하면 진행하지 않음\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await AuthActions.localRegister({\r\n                email, username, password\r\n            });\r\n            const loggedInfo = this.props.result.toJS();\r\n            console.log(loggedInfo);\r\n            // TODO: 로그인 정보 저장 (로컬스토리지/스토어)\r\n            history.push('/'); // 회원가입 성공시 홈페이지로 이동\r\n            // TODO: 자산관리 페이지로 이동\r\n\r\n        }   catch(e){\r\n            // 에러 처리하기\r\n            if(e.response.status === 401) {\r\n                const { key } = e.response.data;\r\n                const message = key === 'email' ? '이미 존재하는 이메일입니다.': '이미 존재하는 아이디입니다.';\r\n                return this.setError(message);\r\n            }\r\n            this.setError('알 수 없는 에러가 발생했습니다.')\r\n        }\r\n    }\r\n\r\n    checkEmailExists = debounce(async (email) =>{\r\n        const {AuthActions} = this.props;\r\n        try{\r\n            await AuthActions.checkEmailExists(email);\r\n            if(this.props.exists.get('email')){\r\n                this.setError('이미 존재하는 이메일입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    chechUsernameExists = debounce(async (username) =>{\r\n        const {AuthActions} =this.props;\r\n        try{\r\n            await AuthActions.chechUsernameExists(username);\r\n            if(this.props.exists.get('username')){\r\n                this.setError('이미 존재하는 아이디입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    \r\n\r\n    setError = debounce(async (message) => {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.setError({\r\n            form: 'register',\r\n            message\r\n        });\r\n    }, 300)\r\n\r\n    validate = {\r\n        email: (value) =>{\r\n            if(!isEmail(value)) {\r\n                this.setError('잘못된 이메일 형식 입니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        username: (value) => {\r\n            if(!isAlphanumeric(value) || !isLength(value, {min:4, max: 15})){\r\n                this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        password: (value) => {\r\n            if(!isLength(value, {min: 6})){\r\n                this.setError('비밀번호를 6자 이상 입력하세요.');\r\n                return false;\r\n            }\r\n            this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\r\n            return true;\r\n        },\r\n        passwordConfirm: (value)=>{\r\n            if(this.props.form.get('password')!==value){\r\n                this.setError('비밀번호확인이 일치하지 않습니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'register'\r\n        });\r\n\r\n        // 검증작업 진행\r\n        const validation = this.validate[name](value);\r\n        if(name.indexOf('password')>-1||!validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\r\n    \r\n        // TODO: 이메일, 아이디 중복 확인\r\n        const check = name ==='email' ? this.checkEmailExists: this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\r\n        check(value);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.initializeForm('register')\r\n    }\r\n    \r\n    render() {\r\n        const {error} = this.props;\r\n        const { email, username, password, passwordConfirm } = this.props.form.toJS();\r\n        const { handleChange } = this;\r\n\r\n        return (\r\n            <AuthContent title=\"회원가입\">\r\n                <InputWithLabel \r\n                    label=\"이메일\"\r\n                    name=\"email\"\r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"아이디\" \r\n                    name=\"username\" \r\n                    placeholder=\"아이디\" \r\n                    value={username} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호 확인\" \r\n                    name=\"passwordConfirm\" \r\n                    placeholder=\"비밀번호 확인\" \r\n                    type=\"password\" \r\n                    value={passwordConfirm}\r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton onClick={this.handleLocalRegister}>회원가입</AuthButton>\r\n                <RightAlignedLink to=\"/auth/login\">로그인</RightAlignedLink>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['register', 'form']),\r\n        error: state.auth.getIn(['register','error']),\r\n        exists: state.auth.getIn(['register', 'exists']),\r\n        result: state.auth.get('result')\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch)\r\n    })\r\n)(Register);"]},"metadata":{},"sourceType":"module"}