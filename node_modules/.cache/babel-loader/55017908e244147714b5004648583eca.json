{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";// file: src/component/PhoneInfo.js\nimport React,{Component}from'react';var PhoneInfo=/*#__PURE__*/function(_Component){_inherits(PhoneInfo,_Component);var _super=_createSuper(PhoneInfo);function PhoneInfo(){var _this;_classCallCheck(this,PhoneInfo);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={// 우리는 수정 버튼을 눌렀을 때 editing  값을 true로 설정해줄 것입니다.\n// 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\n// input 형태로 보여주게 됩니다.\nediting:false,// input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\n// 설정합니다.\nname:'',phone:''};_this.handleRemove=function(){// 삭제 버튼이 클릭되면 onRemove에 id 넣어서 호출\nvar _this$props=_this.props,info=_this$props.info,onRemove=_this$props.onRemove;onRemove(info.id);};_this.handleToggleEdit=function(){var editing=_this.state.editing;_this.setState({editing:!editing});};_this.handleChange=function(e){var _e$target=e.target,name=_e$target.name,value=_e$target.value;_this.setState(_defineProperty({},name,value));};return _this;}_createClass(PhoneInfo,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){// 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\nif(!this.state.editing&&!nextState.editing&&nextProps.info===this.props.info){return false;}// 나머지 경우엔 리렌더링 함\nreturn true;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){// 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\n// 수정을 눌렀을 땐, 기존의 값이 input에 나타나고,\n// 수정을 적용할 땐, input 의 값들을 부모한테 전달해줍니다.\nvar _this$props2=this.props,info=_this$props2.info,onUpdate=_this$props2.onUpdate;if(!prevState.editing&&this.state.editing){// editing 값이 false -> true 로 전환 될 때\n// info 의 값을 state에 넣어준다\nthis.setState({name:info.name,phone:info.phone,Adate:info.ADate,State:info.State});}if(prevState.editing&&!this.state.editing){// editing 값이 true->false로 전환 될 때\nonUpdate(info.id,{name:this.state.name,phone:this.state.phone,Adate:this.state.ADate,State:this.state.State});}}},{key:\"render\",value:function render(){console.log('render PhoneInfo '+this.props.info.id);var style={border:'1px solid black',padding:'8px',margin:'8px'};var editing=this.state.editing;if(editing){// 수정모드\nreturn/*#__PURE__*/React.createElement(\"div\",{style:style},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{value:this.state.name,name:\"name\",placeholder:\"\\uC774\\uB984\",onChange:this.handleChange})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{value:this.state.phone,name:\"phone\",placeholder:\"\\uC804\\uD654\\uBC88\\uD638\",onChange:this.handleChange})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{value:this.state.State,name:\"State\",placeholder:\"\\uBCF4\\uC720\\uC0C1\\uD0DC\",onChange:this.handleChange})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{value:this.state.ADate,name:\"ADate\",placeholder:\"\\uD68D\\uB4DD\\uB0A0\\uC9DC\",onChange:this.handleChange})),/*#__PURE__*/React.createElement(\"button\",{onClick:this.handleToggleEdit},\"\\uC801\\uC6A9\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.handleRemove},\"\\uC0AD\\uC81C\"));}// 일반모드\nvar _this$props$info=this.props.info,name=_this$props$info.name,phone=_this$props$info.phone,State=_this$props$info.State,ADate=_this$props$info.ADate;return/*#__PURE__*/React.createElement(\"div\",{style:style},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Asset Name: \",name)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Asset ID: \",phone)),/*#__PURE__*/React.createElement(\"div\",null,\"Asset State: \",State),/*#__PURE__*/React.createElement(\"div\",null,\"AcquiredDate: \",ADate,\" \"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.handleToggleEdit},\"\\uC218\\uC815\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.handleRemove},\"\\uC0AD\\uC81C\"));}}]);return PhoneInfo;}(Component);PhoneInfo.defaultProps={info:{name:'자산 명',phone:'000-000-00 000',State:'O',ADate:'2020.06.14',id:0}};export default PhoneInfo;","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/components/Asset/PhoneInfo.js"],"names":["React","Component","PhoneInfo","state","editing","name","phone","handleRemove","props","info","onRemove","id","handleToggleEdit","setState","handleChange","e","target","value","nextProps","nextState","prevProps","prevState","onUpdate","Adate","ADate","State","console","log","style","border","padding","margin","defaultProps"],"mappings":"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","sourcesContent":["// file: src/component/PhoneInfo.js\r\nimport React, {Component} from 'react';\r\n\r\nclass PhoneInfo extends Component{\r\n    static defaultProps={\r\n        info: {\r\n            name: '자산 명',\r\n            phone: '000-000-00 000',\r\n            State:'O',\r\n            ADate:'2020.06.14',\r\n            id:0\r\n        },\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n        if(!this.state.editing\r\n            && !nextState.editing\r\n            && nextProps.info === this.props.info) {\r\n                return false;\r\n            }\r\n            // 나머지 경우엔 리렌더링 함\r\n            return true;\r\n    }\r\n\r\n    state = {\r\n        // 우리는 수정 버튼을 눌렀을 때 editing  값을 true로 설정해줄 것입니다.\r\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n        // input 형태로 보여주게 됩니다.\r\n        editing: false,\r\n        // input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n        // 설정합니다.\r\n        name: '',\r\n        phone: '',\r\n    }\r\n\r\n    handleRemove = () =>{\r\n        // 삭제 버튼이 클릭되면 onRemove에 id 넣어서 호출\r\n        const {info, onRemove } = this.props;\r\n        onRemove(info.id);\r\n    }\r\n\r\n    // editing 값을 반전시키는 함수입니다\r\n    // true -> false, false -> true\r\n    handleToggleEdit = () => {\r\n        const { editing } = this.state;\r\n        this.setState({editing: !editing});\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n        // 수정을 눌렀을 땐, 기존의 값이 input에 나타나고,\r\n        // 수정을 적용할 땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n        const {info, onUpdate} = this.props;\r\n        if(!prevState.editing && this.state.editing){\r\n            // editing 값이 false -> true 로 전환 될 때\r\n            // info 의 값을 state에 넣어준다\r\n            this.setState({\r\n                name: info.name,\r\n                phone: info.phone,\r\n                Adate: info.ADate,\r\n                State: info.State\r\n            })\r\n        }\r\n\r\n        if (prevState.editing && !this.state.editing){\r\n            // editing 값이 true->false로 전환 될 때\r\n            onUpdate(info.id, {\r\n                name: this.state.name,\r\n                phone: this.state.phone,\r\n                Adate: this.state.ADate,\r\n                State: this.state.State\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log('render PhoneInfo '+ this.props.info.id)\r\n        const style={\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        };\r\n\r\n        const {editing} = this.state;\r\n\r\n        if(editing){ // 수정모드\r\n            return(\r\n                <div style={style}>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.name}\r\n                            name=\"name\"\r\n                            placeholder=\"이름\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.phone}\r\n                            name=\"phone\"\r\n                            placeholder=\"전화번호\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.State}\r\n                            name=\"State\"\r\n                            placeholder=\"보유상태\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.ADate}\r\n                            name=\"ADate\"\r\n                            placeholder=\"획득날짜\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <button onClick={this.handleToggleEdit}>적용</button>\r\n                    <button onClick={this.handleRemove}>삭제</button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // 일반모드\r\n        const{\r\n            name, phone, State, ADate\r\n        } = this.props.info;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>Asset Name: {name}</b></div>\r\n                <div><b>Asset ID: {phone}</b></div>\r\n                <div>Asset State: {State}</div>\r\n                <div>AcquiredDate: {ADate} </div>\r\n                <button onClick={this.handleToggleEdit}>수정</button>\r\n                <button onClick={this.handleRemove}>삭제</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;"]},"metadata":{},"sourceType":"module"}