{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from 'lib/api/auth';\nimport { Map } from 'immutable';\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\n\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\n\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\n\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\n\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \n\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\n\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\n\nexport const setError = createAction(SET_ERROR); // { form, message }\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }),\n    exists: Map({\n      email: false,\n      password: false\n    }),\n    error: null\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    }),\n    error: null\n  })\n}); //reducer\n\nexport default handleActions({\n  [CHANGE_INPUT]: (state, action) => {\n    const {\n      form,\n      name,\n      value\n    } = action.payload;\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  }\n}, initialState);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/redux/modules/auth.js"],"names":["createAction","handleActions","pender","AuthAPI","Map","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","CHANGE_INPUT","INITIALIZE_FORM","SET_ERROR","changeInput","initializeForm","checkEmailExists","checkUsernameExists","setError","initialState","register","form","email","username","password","passwordConfirm","exists","error","login","state","action","name","value","payload","setIn","initialForm","get","set"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAEA,SAAQC,GAAR,QAAkB,WAAlB;AAEA,MAAMC,kBAAkB,GAAG,yBAA3B,C,CAAsD;;AACtD,MAAMC,qBAAqB,GAAG,4BAA9B,C,CAA4D;;AAC5D,MAAMC,YAAY,GAAG,mBAArB,C,CAA0C;;AAC1C,MAAMC,eAAe,GAAG,sBAAxB,C,CAAgD;;AAChD,MAAMC,SAAS,GAAG,gBAAlB,C,CAAoC;;AAGpC,OAAO,MAAMC,WAAW,GAAGV,YAAY,CAACO,YAAD,CAAhC,C,CAAgD;;AACvD,OAAO,MAAMI,cAAc,GAAGX,YAAY,CAACQ,eAAD,CAAnC,C,CAAsD;;AAC7D,OAAO,MAAMI,gBAAgB,GAAGZ,YAAY,CAACK,kBAAD,EAAqBF,OAAO,CAACS,gBAA7B,CAArC,C,CAAqF;;AAC5F,OAAO,MAAMC,mBAAmB,GAAGb,YAAY,CAACM,qBAAD,EAAwBH,OAAO,CAACU,mBAAhC,CAAxC,C,CAA8F;;AACrG,OAAO,MAAMC,QAAQ,GAAGd,YAAY,CAACS,SAAD,CAA7B,C,CAA0C;;AAEjD,MAAMM,YAAY,GAAGX,GAAG,CAAC;AACrBY,EAAAA,QAAQ,EAAEZ,GAAG,CAAC;AACVa,IAAAA,IAAI,EAAEb,GAAG,CAAC;AACNc,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,eAAe,EAAE;AAJX,KAAD,CADC;AAOVC,IAAAA,MAAM,EAAElB,GAAG,CAAC;AACRc,MAAAA,KAAK,EAAE,KADC;AAERE,MAAAA,QAAQ,EAAE;AAFF,KAAD,CAPD;AAWVG,IAAAA,KAAK,EAAE;AAXG,GAAD,CADQ;AAcrBC,EAAAA,KAAK,EAAEpB,GAAG,CAAC;AACPa,IAAAA,IAAI,EAAEb,GAAG,CAAC;AACNc,MAAAA,KAAK,EAAE,EADD;AAENE,MAAAA,QAAQ,EAAE;AAFJ,KAAD,CADF;AAKPG,IAAAA,KAAK,EAAE;AALA,GAAD;AAdW,CAAD,CAAxB,C,CAuBA;;AACA,eAAetB,aAAa,CAAC;AACzB,GAACM,YAAD,GAAgB,CAACkB,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAM;AAAET,MAAAA,IAAF;AAAQU,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBF,MAAM,CAACG,OAArC;AACA,WAAOJ,KAAK,CAACK,KAAN,CAAY,CAACb,IAAD,EAAO,MAAP,EAAeU,IAAf,CAAZ,EAAkCC,KAAlC,CAAP;AACH,GAJwB;AAMzB,GAACpB,eAAD,GAAmB,CAACiB,KAAD,EAAQC,MAAR,KAAmB;AAClC,UAAMK,WAAW,GAAGhB,YAAY,CAACiB,GAAb,CAAiBN,MAAM,CAACG,OAAxB,CAApB;AACA,WAAOJ,KAAK,CAACQ,GAAN,CAAUP,MAAM,CAACG,OAAjB,EAA0BE,WAA1B,CAAP;AACH;AATwB,CAAD,EAWzBhB,YAXyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\nimport { pender } from 'redux-pender';\r\nimport * as AuthAPI from 'lib/api/auth';\r\n\r\nimport {Map} from 'immutable';\r\n\r\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\r\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\r\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\r\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\r\n\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\r\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \r\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\r\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\r\nexport const setError = createAction(SET_ERROR); // { form, message }\r\n\r\nconst initialState = Map({\r\n    register: Map({\r\n        form: Map({\r\n            email: '',\r\n            username: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        }),\r\n        exists: Map({\r\n            email: false,\r\n            password: false\r\n        }),\r\n        error: null\r\n    }),\r\n    login: Map({\r\n        form: Map({\r\n            email: '',\r\n            password: ''\r\n        }),\r\n        error: null\r\n    })\r\n});\r\n\r\n//reducer\r\nexport default handleActions({\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const { form, name, value } = action.payload;\r\n        return state.setIn([form, 'form', name], value);\r\n    },\r\n   \r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}