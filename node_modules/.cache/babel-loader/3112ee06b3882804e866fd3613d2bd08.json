{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from 'lib/api/auth';\nimport { Map } from 'immutable';\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\n\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\n\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\n\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\n\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\n\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\n\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\n\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \n\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\n\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\n\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister); // { email, username, password }\n\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const setError = createAction(SET_ERROR); // { form, message }\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }),\n    exists: Map({\n      email: false,\n      password: false\n    }),\n    error: null\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    }),\n    error: null\n  }),\n  result: Map({})\n}); //reducer\n\nexport default handleActions({\n  [CHANGE_INPUT]: (state, action) => {\n    const {\n      form,\n      name,\n      value\n    } = action.payload;\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  },\n  ...pender({\n    type: LOCAL_LOGIN,\n    onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n  }),\n  ...pender({\n    type: LOCAL_REGISTER,\n    onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n  }),\n  [SET_ERROR]: (state, action) => {\n    const {\n      form,\n      message\n    } = action.payload;\n    return state.setIn([form, 'error'], message);\n  }\n}, initialState);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/redux/modules/auth.js"],"names":["createAction","handleActions","pender","AuthAPI","Map","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","CHANGE_INPUT","INITIALIZE_FORM","LOCAL_REGISTER","LOCAL_LOGIN","SET_ERROR","LOGOUT","changeInput","initializeForm","checkEmailExists","checkUsernameExists","localRegister","localLogin","logout","setError","initialState","register","form","email","username","password","passwordConfirm","exists","error","login","result","state","action","name","value","payload","setIn","initialForm","get","set","type","onSuccess","data","message"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\nimport { pender } from 'redux-pender';\r\nimport * as AuthAPI from 'lib/api/auth';\r\n\r\nimport {Map} from 'immutable';\r\n\r\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\r\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\r\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\r\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\r\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\r\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\r\n\r\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\r\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \r\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\r\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\r\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister); // { email, username, password }\r\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\r\n\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\n\r\nexport const setError = createAction(SET_ERROR); // { form, message }\r\n\r\n\r\nconst initialState = Map({\r\n    register: Map({\r\n        form: Map({\r\n            email: '',\r\n            username: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        }),\r\n        exists: Map({\r\n            email: false,\r\n            password: false\r\n        }),\r\n        error: null\r\n    }),\r\n    login: Map({\r\n        form: Map({\r\n            email: '',\r\n            password: ''\r\n        }),\r\n        error: null\r\n    }),\r\n    result: Map({})\r\n});\r\n\r\n//reducer\r\nexport default handleActions({\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const { form, name, value } = action.payload;\r\n        return state.setIn([form, 'form', name], value);\r\n    },\r\n   \r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    ...pender({\r\n        type: LOCAL_LOGIN,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_REGISTER,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    [SET_ERROR]: (state, action) => {\r\n        const { form, message } =action.payload;\r\n        return state.setIn([form, 'error'], message);\r\n    }\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}