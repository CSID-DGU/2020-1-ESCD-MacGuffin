{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\src\\\\containers\\\\Auth\\\\Register.js\";\nimport React, { Component } from 'react';\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as authActions from 'redux/modules/auth';\nimport { isEmail, isLength, isAlphanumeric } from 'validator';\nimport debounce from 'lodash/debounce';\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkEmailExists = async email => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.checkEmailExists(email);\n\n        if (this.props.exists.get('email')) {\n          this.setError('이미 존재하는 이메일입니다.');\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.chechUsernameExists = async username => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.chechUsernameExists(username);\n\n        if (this.props.exists.get('username')) {\n          this.setError('이미 존재하는 아이디입니다.');\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.setError = message => {\n      const {\n        AuthActions\n      } = this.props;\n      AuthActions.setError({\n        form: 'register',\n        message\n      });\n    };\n\n    this.validate = {\n      email: value => {\n        if (!isEmail(value)) {\n          this.setError('잘못된 이메일 형식 입니다.');\n          return false;\n        }\n\n        return true;\n      },\n      username: value => {\n        if (!isAlphanumeric(value) || !isLength(value, {\n          min: 4,\n          max: 15\n        })) {\n          this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\n          return false;\n        }\n\n        return true;\n      },\n      password: value => {\n        if (!isLength(value, {\n          min: 6\n        })) {\n          this.setError('비밀번호를 6자 이상 입력하세요.');\n          return false;\n        }\n\n        this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\n\n        return true;\n      },\n      passwordConfirm: value => {\n        if (this.props.form.get('password') !== value) {\n          this.setError('비밀번호확인이 일치하지 않습니다.');\n          return false;\n        }\n\n        this.setError(null);\n        return true;\n      }\n    };\n\n    this.handleChange = e => {\n      const {\n        AuthActions\n      } = this.props;\n      const {\n        name,\n        value\n      } = e.target;\n      AuthActions.changeInput({\n        name,\n        value,\n        form: 'register'\n      }); // 검증작업 진행\n\n      const validation = this.validate[name](value);\n      if (name.indexOf('password') > -1 || !validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\n      // TODO: 이메일, 아이디 중복 확인\n\n      const check = name === 'email' ? this.checkEmailExists : this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\n\n      check(value);\n    };\n  }\n\n  componentWillUnmount() {\n    const {\n      AuthActions\n    } = this.props;\n    AuthActions.initializeForm('register');\n  }\n\n  render() {\n    const {\n      error\n    } = this.props;\n    const {\n      email,\n      username,\n      password,\n      passwordConfirm\n    } = this.props.form.toJS();\n    const {\n      handleChange\n    } = this;\n    return /*#__PURE__*/React.createElement(AuthContent, {\n      title: \"\\uD68C\\uC6D0\\uAC00\\uC785\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC774\\uBA54\\uC77C\",\n      name: \"email\",\n      placeholder: \"\\uC774\\uBA54\\uC77C\",\n      value: email,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC544\\uC774\\uB514\",\n      name: \"username\",\n      placeholder: \"\\uC544\\uC774\\uB514\",\n      value: username,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      name: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      type: \"password\",\n      value: password,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      name: \"passwordConfirm\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      type: \"password\",\n      value: passwordConfirm,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }), error && /*#__PURE__*/React.createElement(AuthError, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 30\n      }\n    }, error), /*#__PURE__*/React.createElement(AuthButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), /*#__PURE__*/React.createElement(RightAlignedLink, {\n      to: \"/auth/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, \"\\uB85C\\uADF8\\uC778\"));\n  }\n\n}\n\nexport default connect(state => ({\n  form: state.auth.getIn(['register', 'form']),\n  error: state.auth.getIn(['register', 'error']),\n  exists: state.auth.getIn(['register', 'exists'])\n}), dispatch => ({\n  AuthActions: bindActionCreators(authActions, dispatch)\n}))(Register);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/containers/Auth/Register.js"],"names":["React","Component","AuthContent","InputWithLabel","AuthButton","RightAlignedLink","AuthError","connect","bindActionCreators","authActions","isEmail","isLength","isAlphanumeric","debounce","Register","checkEmailExists","email","AuthActions","props","exists","get","setError","e","console","log","chechUsernameExists","username","message","form","validate","value","min","max","password","passwordConfirm","handleChange","name","target","changeInput","validation","indexOf","check","componentWillUnmount","initializeForm","render","error","toJS","state","auth","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as authActions from 'redux/modules/auth';\r\nimport {isEmail, isLength, isAlphanumeric} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nclass Register extends Component {\r\n\r\n    checkEmailExists = async (email) =>{\r\n        const {AuthActions} = this.props;\r\n        try{\r\n            await AuthActions.checkEmailExists(email);\r\n            if(this.props.exists.get('email')){\r\n                this.setError('이미 존재하는 이메일입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    chechUsernameExists = async (username) =>{\r\n        const {AuthActions} =this.props;\r\n        try{\r\n            await AuthActions.chechUsernameExists(username);\r\n            if(this.props.exists.get('username')){\r\n                this.setError('이미 존재하는 아이디입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    setError = (message) => {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.setError({\r\n            form: 'register',\r\n            message\r\n        });\r\n    }\r\n\r\n    validate = {\r\n        email: (value) =>{\r\n            if(!isEmail(value)) {\r\n                this.setError('잘못된 이메일 형식 입니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        username: (value) => {\r\n            if(!isAlphanumeric(value) || !isLength(value, {min:4, max: 15})){\r\n                this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        password: (value) => {\r\n            if(!isLength(value, {min: 6})){\r\n                this.setError('비밀번호를 6자 이상 입력하세요.');\r\n                return false;\r\n            }\r\n            this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\r\n            return true;\r\n        },\r\n        passwordConfirm: (value)=>{\r\n            if(this.props.form.get('password')!==value){\r\n                this.setError('비밀번호확인이 일치하지 않습니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'register'\r\n        });\r\n\r\n        // 검증작업 진행\r\n        const validation = this.validate[name](value);\r\n        if(name.indexOf('password')>-1||!validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\r\n    \r\n        // TODO: 이메일, 아이디 중복 확인\r\n        const check = name ==='email' ? this.checkEmailExists: this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\r\n        check(value);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.initializeForm('register')\r\n    }\r\n    \r\n    render() {\r\n        const {error} = this.props;\r\n        const { email, username, password, passwordConfirm } = this.props.form.toJS();\r\n        const { handleChange } = this;\r\n\r\n        return (\r\n            <AuthContent title=\"회원가입\">\r\n                <InputWithLabel \r\n                    label=\"이메일\"\r\n                    name=\"email\"\r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"아이디\" \r\n                    name=\"username\" \r\n                    placeholder=\"아이디\" \r\n                    value={username} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호 확인\" \r\n                    name=\"passwordConfirm\" \r\n                    placeholder=\"비밀번호 확인\" \r\n                    type=\"password\" \r\n                    value={passwordConfirm}\r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton>회원가입</AuthButton>\r\n                <RightAlignedLink to=\"/auth/login\">로그인</RightAlignedLink>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['register', 'form']),\r\n        error: state.auth.getIn(['register','error']),\r\n        exists: state.auth.getIn(['register', 'exists'])\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch)\r\n    })\r\n)(Register);"]},"metadata":{},"sourceType":"module"}