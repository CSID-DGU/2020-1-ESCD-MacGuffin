{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _createSuper from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{AuthContent,InputWithLabel,AuthButton,RightAlignedLink,AuthError}from'components/Auth';import{connect}from'react-redux';import{bindActionCreators}from'redux';import*as authActions from'redux/modules/auth';import*as userActions from'redux/modules/user';import storage from'lib/storage';import{isEmail,isLength,isAlphanumeric}from'validator';import debounce from'lodash/debounce';var Register=/*#__PURE__*/function(_Component){_inherits(Register,_Component);var _super=_createSuper(Register);function Register(){var _this;_classCallCheck(this,Register);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.handleLocalRegister=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this$props,form,AuthActions,UserActions,error,history,_form$toJS,email,username,password,passwordConfirm,_assertThisInitialize,validate,loggedInfo,key,message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this$props=_this.props,form=_this$props.form,AuthActions=_this$props.AuthActions,UserActions=_this$props.UserActions,error=_this$props.error,history=_this$props.history;_form$toJS=form.toJS(),email=_form$toJS.email,username=_form$toJS.username,password=_form$toJS.password,passwordConfirm=_form$toJS.passwordConfirm;_assertThisInitialize=_assertThisInitialized(_this),validate=_assertThisInitialize.validate;if(!error){_context.next=5;break;}return _context.abrupt(\"return\");case 5:if(!(!validate['email'](email)||!validate['username'](username)||!validate['password'](password)||!validate['passwordConfirm'](passwordConfirm))){_context.next=7;break;}return _context.abrupt(\"return\");case 7:_context.prev=7;_context.next=10;return AuthActions.localRegister({email:email,username:username,password:password});case 10:loggedInfo=_this.props.result.toJS();console.log(loggedInfo);// TODO: 로그인 정보 저장 (로컬스토리지/스토어)\nstorage.set('loggedInfo',loggedInfo);UserActions.setLoggedInfo(loggedInfo);UserActions.setValidated(true);history.push('/');// 회원가입 성공시 홈페이지로 이동\n_context.next=25;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](7);if(!(_context.t0.response.status===409)){_context.next=24;break;}key=_context.t0.response.data.key;message=key==='email'?'이미 존재하는 이메일입니다.':'이미 존재하는 아이디입니다.';return _context.abrupt(\"return\",_this.setError(message));case 24:_this.setError('알 수 없는 에러가 발생했습니다.');case 25:case\"end\":return _context.stop();}}},_callee,null,[[7,18]]);}));_this.checkEmailExists=debounce(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email){var AuthActions;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:AuthActions=_this.props.AuthActions;_context2.prev=1;_context2.next=4;return AuthActions.checkEmailExists(email);case 4:if(_this.props.exists.get('email')){_this.setError('이미 존재하는 이메일입니다.');}else{_this.setError(null);}_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[1,7]]);}));return function(_x){return _ref2.apply(this,arguments);};}(),300);_this.checkUsernameExists=debounce(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username){var AuthActions;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:AuthActions=_this.props.AuthActions;_context3.prev=1;_context3.next=4;return AuthActions.chechUsernameExists(username);case 4:if(_this.props.exists.get('username')){_this.setError('이미 존재하는 아이디입니다.');}else{_this.setError(null);}_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](1);console.log(_context3.t0);case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[1,7]]);}));return function(_x2){return _ref3.apply(this,arguments);};}(),300);_this.setError=debounce(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(message){var AuthActions;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:AuthActions=_this.props.AuthActions;AuthActions.setError({form:'register',message:message});case 2:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x3){return _ref4.apply(this,arguments);};}(),300);_this.validate={email:function email(value){if(!isEmail(value)){_this.setError('잘못된 이메일 형식 입니다.');return false;}return true;},username:function username(value){if(!isAlphanumeric(value)||!isLength(value,{min:4,max:15})){_this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');return false;}return true;},password:function password(value){if(!isLength(value,{min:6})){_this.setError('비밀번호를 6자 이상 입력하세요.');return false;}_this.setError(null);// 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\nreturn true;},passwordConfirm:function passwordConfirm(value){if(_this.props.form.get('password')!==value){_this.setError('비밀번호확인이 일치하지 않습니다.');return false;}_this.setError(null);return true;}};_this.handleChange=function(e){var AuthActions=_this.props.AuthActions;var _e$target=e.target,name=_e$target.name,value=_e$target.value;AuthActions.changeInput({name:name,value:value,form:'register'});// 검증작업 진행\nvar validation=_this.validate[name](value);if(name.indexOf('password')>-1||!validation)return;//비밀번호 검증이거나, 검증 실패하면 여기서 마\n// TODO: 이메일, 아이디 중복 확인\nvar check=name==='email'?_this.checkEmailExists:_this.chechUsernameExists;// name에 따라 이메일체크할지 아이디 체크할지 결정\ncheck(value);};return _this;}_createClass(Register,[{key:\"componentWillUnmount\",value:function componentWillUnmount(){var AuthActions=this.props.AuthActions;AuthActions.initializeForm('register');}},{key:\"render\",value:function render(){var error=this.props.error;var _this$props$form$toJS=this.props.form.toJS(),email=_this$props$form$toJS.email,username=_this$props$form$toJS.username,password=_this$props$form$toJS.password,passwordConfirm=_this$props$form$toJS.passwordConfirm;var handleChange=this.handleChange;return/*#__PURE__*/React.createElement(AuthContent,{title:\"\\uD68C\\uC6D0\\uAC00\\uC785\"},/*#__PURE__*/React.createElement(InputWithLabel,{label:\"\\uC774\\uBA54\\uC77C\",name:\"email\",placeholder:\"\\uC774\\uBA54\\uC77C\",value:email,onChange:handleChange}),/*#__PURE__*/React.createElement(InputWithLabel,{label:\"\\uC544\\uC774\\uB514\",name:\"username\",placeholder:\"\\uC544\\uC774\\uB514\",value:username,onChange:handleChange}),/*#__PURE__*/React.createElement(InputWithLabel,{label:\"\\uBE44\\uBC00\\uBC88\\uD638\",name:\"password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\",type:\"password\",value:password,onChange:handleChange}),/*#__PURE__*/React.createElement(InputWithLabel,{label:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",name:\"passwordConfirm\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",type:\"password\",value:passwordConfirm,onChange:handleChange}),error&&/*#__PURE__*/React.createElement(AuthError,null,error),/*#__PURE__*/React.createElement(AuthButton,{onClick:this.handleLocalRegister},\"\\uD68C\\uC6D0\\uAC00\\uC785\"),/*#__PURE__*/React.createElement(RightAlignedLink,{to:\"/auth/login\"},\"\\uB85C\\uADF8\\uC778\"));}}]);return Register;}(Component);export default connect(function(state){return{form:state.auth.getIn(['register','form']),error:state.auth.getIn(['register','error']),exists:state.auth.getIn(['register','exists']),result:state.auth.get('result')};},function(dispatch){return{AuthActions:bindActionCreators(authActions,dispatch),UserActions:bindActionCreators(userActions,dispatch)};})(Register);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/containers/Auth/Register.js"],"names":["React","Component","AuthContent","InputWithLabel","AuthButton","RightAlignedLink","AuthError","connect","bindActionCreators","authActions","userActions","storage","isEmail","isLength","isAlphanumeric","debounce","Register","handleLocalRegister","props","form","AuthActions","UserActions","error","history","toJS","email","username","password","passwordConfirm","validate","localRegister","loggedInfo","result","console","log","set","setLoggedInfo","setValidated","push","response","status","key","data","message","setError","checkEmailExists","exists","get","checkUsernameExists","chechUsernameExists","value","min","max","handleChange","e","target","name","changeInput","validation","indexOf","check","initializeForm","state","auth","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as authActions from 'redux/modules/auth';\r\nimport * as userActions from 'redux/modules/user';\r\nimport storage from 'lib/storage';\r\nimport {isEmail, isLength, isAlphanumeric} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nclass Register extends Component {\r\n\r\n\r\n    handleLocalRegister = async() => {\r\n        const {form, AuthActions, UserActions ,error, history} = this.props;\r\n        const {email, username, password, passwordConfirm} =form.toJS();\r\n\r\n        const {validate} =this;\r\n\r\n        if(error) return; // 현재 에러가 있는 상태라면 진행하지 않음\r\n        if(!validate['email'](email)\r\n        || !validate['username'](username)\r\n        || !validate['password'](password)\r\n        || !validate['passwordConfirm'](passwordConfirm)){\r\n            // 하나라도 실패하면 진행하지 않음\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await AuthActions.localRegister({\r\n                email, username, password\r\n            });\r\n            const loggedInfo = this.props.result.toJS();\r\n            console.log(loggedInfo);\r\n            // TODO: 로그인 정보 저장 (로컬스토리지/스토어)\r\n            storage.set('loggedInfo', loggedInfo);\r\n            UserActions.setLoggedInfo(loggedInfo);\r\n            UserActions.setValidated(true);\r\n            history.push('/'); // 회원가입 성공시 홈페이지로 이동\r\n\r\n        }   catch(e){\r\n            // 에러 처리하기\r\n            if(e.response.status === 409) {\r\n                const { key } = e.response.data;\r\n                const message = key === 'email' ? '이미 존재하는 이메일입니다.': '이미 존재하는 아이디입니다.';\r\n                return this.setError(message);\r\n            }\r\n            this.setError('알 수 없는 에러가 발생했습니다.')\r\n        }\r\n    }\r\n\r\n    checkEmailExists = debounce(async (email) =>{\r\n        const {AuthActions} = this.props;\r\n        try{\r\n            await AuthActions.checkEmailExists(email);\r\n            if(this.props.exists.get('email')){\r\n                this.setError('이미 존재하는 이메일입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    checkUsernameExists = debounce(async (username) =>{\r\n        const {AuthActions} =this.props;\r\n        try{\r\n            await AuthActions.chechUsernameExists(username);\r\n            if(this.props.exists.get('username')){\r\n                this.setError('이미 존재하는 아이디입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    \r\n\r\n    setError = debounce(async (message) => {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.setError({\r\n            form: 'register',\r\n            message\r\n        });\r\n    }, 300)\r\n\r\n    validate = {\r\n        email: (value) =>{\r\n            if(!isEmail(value)) {\r\n                this.setError('잘못된 이메일 형식 입니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        username: (value) => {\r\n            if(!isAlphanumeric(value) || !isLength(value, {min:4, max: 15})){\r\n                this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        password: (value) => {\r\n            if(!isLength(value, {min: 6})){\r\n                this.setError('비밀번호를 6자 이상 입력하세요.');\r\n                return false;\r\n            }\r\n            this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\r\n            return true;\r\n        },\r\n        passwordConfirm: (value)=>{\r\n            if(this.props.form.get('password')!==value){\r\n                this.setError('비밀번호확인이 일치하지 않습니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'register'\r\n        });\r\n\r\n        // 검증작업 진행\r\n        const validation = this.validate[name](value);\r\n        if(name.indexOf('password')>-1||!validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\r\n    \r\n        // TODO: 이메일, 아이디 중복 확인\r\n        const check = name ==='email' ? this.checkEmailExists: this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\r\n        check(value);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.initializeForm('register')\r\n    }\r\n    \r\n    render() {\r\n        const {error} = this.props;\r\n        const { email, username, password, passwordConfirm } = this.props.form.toJS();\r\n        const { handleChange } = this;\r\n\r\n        return (\r\n            <AuthContent title=\"회원가입\">\r\n                <InputWithLabel \r\n                    label=\"이메일\"\r\n                    name=\"email\"\r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"아이디\" \r\n                    name=\"username\" \r\n                    placeholder=\"아이디\" \r\n                    value={username} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호 확인\" \r\n                    name=\"passwordConfirm\" \r\n                    placeholder=\"비밀번호 확인\" \r\n                    type=\"password\" \r\n                    value={passwordConfirm}\r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton onClick={this.handleLocalRegister}>회원가입</AuthButton>\r\n                <RightAlignedLink to=\"/auth/login\">로그인</RightAlignedLink>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['register', 'form']),\r\n        error: state.auth.getIn(['register','error']),\r\n        exists: state.auth.getIn(['register', 'exists']),\r\n        result: state.auth.get('result')\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch),\r\n        UserActions: bindActionCreators(userActions, dispatch)\r\n    })\r\n)(Register);"]},"metadata":{},"sourceType":"module"}