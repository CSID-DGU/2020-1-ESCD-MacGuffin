{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport * as AuthAPI from 'lib/api/auth';\nimport { pender } from 'redux-pender';\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\n\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\n\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\n\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인상태 확인\n\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\n\nexport const setValidated = createAction(SET_VALIDATED); // validated\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\nconst initialState = Map({\n  loggedInfo: Map({\n    // 현재 로그인중인 유저의 정보\n    thumbnail: null,\n    username: null\n  }),\n  logged: false,\n  // 현재 로그인중인지 알려준다\n  validated: false // 이 값은 현재 로그인중인지 아닌지 한번 서버측에 검증했음을 의미\n\n});\nexport default handleActions({\n  [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\n  [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\n  ...pender({\n    type: CHECK_STATUS,\n    onSuccess: (state, action) => state.set('loggedInfo', Map(action.payload.data)).set('validated', true),\n    onFailure: (state, action) => initialState\n  })\n}, initialState);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/redux/modules/user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","initialState","loggedInfo","thumbnail","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AAEA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,SAAQC,MAAR,QAAqB,cAArB;AAEA,MAAMC,eAAe,GAAG,sBAAxB,C,CAAgD;;AAChD,MAAMC,aAAa,GAAG,oBAAtB,C,CAA4C;;AAC5C,MAAMC,MAAM,GAAG,aAAf,C,CAA8B;;AAC9B,MAAMC,YAAY,GAAG,mBAArB,C,CAA0C;;AAE1C,OAAO,MAAMC,aAAa,GAAGT,YAAY,CAACK,eAAD,CAAlC,C,CAAqD;;AAC5D,OAAO,MAAMK,YAAY,GAAGV,YAAY,CAACM,aAAD,CAAjC,C,CAAkD;;AACzD,OAAO,MAAMK,MAAM,GAAGX,YAAY,CAACO,MAAD,EAASJ,OAAO,CAACQ,MAAjB,CAA3B;AACP,OAAO,MAAMC,WAAW,GAAGZ,YAAY,CAACQ,YAAD,EAAeL,OAAO,CAACS,WAAvB,CAAhC;AAEP,MAAMC,YAAY,GAAGX,GAAG,CAAC;AACrBY,EAAAA,UAAU,EAAEZ,GAAG,CAAC;AAAE;AACda,IAAAA,SAAS,EAAE,IADC;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAAD,CADM;AAKrBC,EAAAA,MAAM,EAAE,KALa;AAKN;AACfC,EAAAA,SAAS,EAAE,KANU,CAMJ;;AANI,CAAD,CAAxB;AASA,eAAejB,aAAa,CAAC;AACzB,GAACI,eAAD,GAAmB,CAACc,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAR,CAA3B,EAA6CD,GAA7C,CAAiD,QAAjD,EAA2D,IAA3D,CADb;AAEzB,GAACf,aAAD,GAAiB,CAACa,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACE,GAAN,CAAU,WAAV,EAAuBD,MAAM,CAACE,OAA9B,CAFX;AAGzB,KAAGlB,MAAM,CAAC;AACNmB,IAAAA,IAAI,EAAEf,YADA;AAENgB,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA3B,EAAkDJ,GAAlD,CAAsD,WAAtD,EAAmE,IAAnE,CAFxB;AAGNK,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmBP;AAHxB,GAAD;AAHgB,CAAD,EAQzBA,YARyB,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport * as AuthAPI from 'lib/api/auth';\r\nimport {pender} from 'redux-pender';\r\n\r\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\r\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\r\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\r\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인상태 확인\r\n\r\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\r\nexport const setValidated = createAction(SET_VALIDATED); // validated\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\r\n\r\nconst initialState = Map({\r\n    loggedInfo: Map({ // 현재 로그인중인 유저의 정보\r\n        thumbnail: null,\r\n        username: null\r\n    }),\r\n    logged: false, // 현재 로그인중인지 알려준다\r\n    validated: false // 이 값은 현재 로그인중인지 아닌지 한번 서버측에 검증했음을 의미\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\r\n    [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\r\n    ...pender({\r\n        type: CHECK_STATUS,\r\n        onSuccess: (state, action) => state.set('loggedInfo', Map(action.payload.data)).set('validated', true), \r\n        onFailure: (state, action) => initialState\r\n    })\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}