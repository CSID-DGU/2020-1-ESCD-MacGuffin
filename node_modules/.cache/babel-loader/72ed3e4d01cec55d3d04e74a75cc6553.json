{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _objectSpread2;import{createAction,handleActions}from'redux-actions';import{pender}from'redux-pender';import*as AuthAPI from'lib/api/auth';import{Map}from'immutable';var CHECK_EMAIL_EXISTS='auth/CHECK_EMAIL_EXISTS';// 이메일 중복 확인\nvar CHECK_USERNAME_EXISTS='auth/CHECK_USERNAME_EXISTS';// 아이디 중복 확인\nvar CHANGE_INPUT='auth/CHANGE_INPUT';// input 값 변경\nvar INITIALIZE_FORM='auth/INITIALIZE_FORM';// form 초기화\nvar LOCAL_REGISTER='auth/LOCAL_REGISTER';// 이메일 가입\nvar LOCAL_LOGIN='auth/LOCAL_LOGIN';// 이메일 로그인\nvar SET_ERROR='auth/SET_ERROR';// 오류 설정\nvar LOGOUT='auth/LOGOUT';// 로그아웃\nexport var changeInput=createAction(CHANGE_INPUT);//  { form, name, value }\nexport var initializeForm=createAction(INITIALIZE_FORM);// form \nexport var checkEmailExists=createAction(CHECK_EMAIL_EXISTS,AuthAPI.checkEmailExists);// email\nexport var checkUsernameExists=createAction(CHECK_USERNAME_EXISTS,AuthAPI.checkUsernameExists);// username\nexport var localRegister=createAction(LOCAL_REGISTER,AuthAPI.localRegister);// { email, username, password }\nexport var localLogin=createAction(LOCAL_LOGIN,AuthAPI.localLogin);// { email, password }\nexport var logout=createAction(LOGOUT,AuthAPI.logout);export var setError=createAction(SET_ERROR);// { form, message }\nvar initialState=Map({register:Map({form:Map({email:'',username:'',password:'',passwordConfirm:''}),exists:Map({email:false,password:false}),error:null}),login:Map({form:Map({email:'',password:''}),error:null}),result:Map({})});//reducer\nexport default handleActions(_objectSpread((_objectSpread2={},_defineProperty(_objectSpread2,CHANGE_INPUT,function(state,action){var _action$payload=action.payload,form=_action$payload.form,name=_action$payload.name,value=_action$payload.value;return state.setIn([form,'form',name],value);}),_defineProperty(_objectSpread2,INITIALIZE_FORM,function(state,action){var initialForm=initialState.get(action.payload);return state.set(action.payload,initialForm);}),_objectSpread2),pender({type:LOCAL_LOGIN,onSuccess:function onSuccess(state,action){return state.set('result',Map(action.payload.data));}}),{},pender({type:LOCAL_REGISTER,onSuccess:function onSuccess(state,action){return state.set('result',Map(action.payload.data));}}),_defineProperty({},SET_ERROR,function(state,action){var _action$payload2=action.payload,form=_action$payload2.form,message=_action$payload2.message;return state.setIn([form,'error'],message);})),initialState);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/redux/modules/auth.js"],"names":["createAction","handleActions","pender","AuthAPI","Map","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","CHANGE_INPUT","INITIALIZE_FORM","LOCAL_REGISTER","LOCAL_LOGIN","SET_ERROR","LOGOUT","changeInput","initializeForm","checkEmailExists","checkUsernameExists","localRegister","localLogin","logout","setError","initialState","register","form","email","username","password","passwordConfirm","exists","error","login","result","state","action","payload","name","value","setIn","initialForm","get","set","type","onSuccess","data","message"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\nimport { pender } from 'redux-pender';\r\nimport * as AuthAPI from 'lib/api/auth';\r\n\r\nimport {Map} from 'immutable';\r\n\r\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\r\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\r\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\r\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\r\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\r\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\r\n\r\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\r\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \r\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\r\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\r\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister); // { email, username, password }\r\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\r\n\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\n\r\nexport const setError = createAction(SET_ERROR); // { form, message }\r\n\r\n\r\nconst initialState = Map({\r\n    register: Map({\r\n        form: Map({\r\n            email: '',\r\n            username: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        }),\r\n        exists: Map({\r\n            email: false,\r\n            password: false\r\n        }),\r\n        error: null\r\n    }),\r\n    login: Map({\r\n        form: Map({\r\n            email: '',\r\n            password: ''\r\n        }),\r\n        error: null\r\n    }),\r\n    result: Map({})\r\n});\r\n\r\n//reducer\r\nexport default handleActions({\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const { form, name, value } = action.payload;\r\n        return state.setIn([form, 'form', name], value);\r\n    },\r\n   \r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    ...pender({\r\n        type: LOCAL_LOGIN,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_REGISTER,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    [SET_ERROR]: (state, action) => {\r\n        const { form, message } =action.payload;\r\n        return state.setIn([form, 'error'], message);\r\n    }\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}