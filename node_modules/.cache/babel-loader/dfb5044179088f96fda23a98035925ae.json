{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\BumSu Park\\\\React\\\\macguffin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _objectSpread2;import{createAction,handleActions}from'redux-actions';import{Map}from'immutable';import*as AuthAPI from'lib/api/auth';import{pender}from'redux-pender';var SET_LOGGED_INFO='user/SET_LOGGED_INFO';// 로그인 정보 설정\nvar SET_VALIDATED='user/SET_VALIDATED';// validated 값 설정\nvar LOGOUT='user/LOGOUT';// 로그아웃\nvar CHECK_STATUS='user/CHECK_STATUS';// 현재 로그인상태 확인\nexport var setLoggedInfo=createAction(SET_LOGGED_INFO);// loggedInfo\nexport var setValidated=createAction(SET_VALIDATED);// validated\nexport var logout=createAction(LOGOUT,AuthAPI.logout);export var checkStatus=createAction(CHECK_STATUS,AuthAPI.checkStatus);var initialState=Map({loggedInfo:Map({// 현재 로그인중인 유저의 정보\nthumbnail:null,username:null}),logged:false,// 현재 로그인중인지 알려준다\nvalidated:false// 이 값은 현재 로그인중인지 아닌지 한번 서버측에 검증했음을 의미\n});export default handleActions(_objectSpread((_objectSpread2={},_defineProperty(_objectSpread2,SET_LOGGED_INFO,function(state,action){return state.set('loggedInfo',Map(action.payload)).set('logged',true);}),_defineProperty(_objectSpread2,SET_VALIDATED,function(state,action){return state.set('validated',action.payload);}),_objectSpread2),pender({type:CHECK_STATUS,onSuccess:function onSuccess(state,action){return state.set('loggedInfo',Map(action.payload.data)).set('validated',true);},onFailure:function onFailure(state,action){return initialState;}})),initialState);","map":{"version":3,"sources":["C:/Users/BumSu Park/React/macguffin/src/redux/modules/user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","initialState","loggedInfo","thumbnail","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":"8QAAA,OAASA,YAAT,CAAuBC,aAAvB,KAA4C,eAA5C,CAEA,OAAQC,GAAR,KAAkB,WAAlB,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,cAAzB,CACA,OAAQC,MAAR,KAAqB,cAArB,CAEA,GAAMC,CAAAA,eAAe,CAAG,sBAAxB,CAAgD;AAChD,GAAMC,CAAAA,aAAa,CAAG,oBAAtB,CAA4C;AAC5C,GAAMC,CAAAA,MAAM,CAAG,aAAf,CAA8B;AAC9B,GAAMC,CAAAA,YAAY,CAAG,mBAArB,CAA0C;AAE1C,MAAO,IAAMC,CAAAA,aAAa,CAAGT,YAAY,CAACK,eAAD,CAAlC,CAAqD;AAC5D,MAAO,IAAMK,CAAAA,YAAY,CAAGV,YAAY,CAACM,aAAD,CAAjC,CAAkD;AACzD,MAAO,IAAMK,CAAAA,MAAM,CAAGX,YAAY,CAACO,MAAD,CAASJ,OAAO,CAACQ,MAAjB,CAA3B,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAGZ,YAAY,CAACQ,YAAD,CAAeL,OAAO,CAACS,WAAvB,CAAhC,CAEP,GAAMC,CAAAA,YAAY,CAAGX,GAAG,CAAC,CACrBY,UAAU,CAAEZ,GAAG,CAAC,CAAE;AACda,SAAS,CAAE,IADC,CAEZC,QAAQ,CAAE,IAFE,CAAD,CADM,CAKrBC,MAAM,CAAE,KALa,CAKN;AACfC,SAAS,CAAE,KAAM;AANI,CAAD,CAAxB,CASA,cAAejB,CAAAA,aAAa,iEACvBI,eADuB,CACL,SAACc,KAAD,CAAQC,MAAR,QAAmBD,CAAAA,KAAK,CAACE,GAAN,CAAU,YAAV,CAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAR,CAA3B,EAA6CD,GAA7C,CAAiD,QAAjD,CAA2D,IAA3D,CAAnB,EADK,iCAEvBf,aAFuB,CAEP,SAACa,KAAD,CAAQC,MAAR,QAAmBD,CAAAA,KAAK,CAACE,GAAN,CAAU,WAAV,CAAuBD,MAAM,CAACE,OAA9B,CAAnB,EAFO,kBAGrBlB,MAAM,CAAC,CACNmB,IAAI,CAAEf,YADA,CAENgB,SAAS,CAAE,mBAACL,KAAD,CAAQC,MAAR,QAAmBD,CAAAA,KAAK,CAACE,GAAN,CAAU,YAAV,CAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA3B,EAAkDJ,GAAlD,CAAsD,WAAtD,CAAmE,IAAnE,CAAnB,EAFL,CAGNK,SAAS,CAAE,mBAACP,KAAD,CAAQC,MAAR,QAAmBP,CAAAA,YAAnB,EAHL,CAAD,CAHe,EAQzBA,YARyB,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport * as AuthAPI from 'lib/api/auth';\r\nimport {pender} from 'redux-pender';\r\n\r\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\r\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\r\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\r\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인상태 확인\r\n\r\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\r\nexport const setValidated = createAction(SET_VALIDATED); // validated\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\r\n\r\nconst initialState = Map({\r\n    loggedInfo: Map({ // 현재 로그인중인 유저의 정보\r\n        thumbnail: null,\r\n        username: null\r\n    }),\r\n    logged: false, // 현재 로그인중인지 알려준다\r\n    validated: false // 이 값은 현재 로그인중인지 아닌지 한번 서버측에 검증했음을 의미\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\r\n    [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\r\n    ...pender({\r\n        type: CHECK_STATUS,\r\n        onSuccess: (state, action) => state.set('loggedInfo', Map(action.payload.data)).set('validated', true), \r\n        onFailure: (state, action) => initialState\r\n    })\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}