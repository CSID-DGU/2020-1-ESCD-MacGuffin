{"version":3,"sources":["redux/modules/base.js","pages/Home.js","lib/styleUtils.js","components/Auth/AuthWrapper.js","components/Auth/AuthContent.js","components/Auth/InputWithLabel.js","components/Auth/AuthButton.js","components/Auth/RightAlignedLink.js","components/Auth/AuthError.js","lib/api/auth.js","redux/modules/auth.js","redux/modules/user.js","lib/storage.js","containers/Auth/Login.js","containers/Auth/Register.js","pages/Auth.js","components/Asset/PhoneForm.js","components/Asset/PhoneInfo.js","components/Asset/PhoneInfoList.js","components/Asset/LogoutButton.js","components/Asset/Header.js","components/Asset/Asset.js","pages/Asset.js","components/Base/Header/Header.js","components/Base/Header/LoginButton.js","containers/Base/HeaderContainer.js","App.js","Root.js","serviceWorker.js","redux/modules/index.js","redux/configureStore.js","index.js"],"names":["setHeaderVisibility","createAction","initialState","Map","header","visible","handleActions","state","action","setIn","payload","Home","className","Component","sizes","wide","desktop","tablet","phone","media","Object","keys","reduce","acc","label","css","shadow","weight","transitions","shake","keyframes","Positioner","styled","div","ShadowedBox","LogoWrapper","oc","teal","Logo","Link","Contents","AuthWrapper","children","to","Title","gray","AuthContent","title","Wrapper","Label","Input","input","InputWithLabel","rest","AuthButton","onClick","Aligner","StyledLink","RightAlignedLink","red","AuthError","logout","axios","delete","changeInput","initializeForm","checkEmailExists","email","get","checkUsernameExists","username","localRegister","password","post","localLogin","AuthAPI","setError","register","form","passwordConfirm","exists","error","login","result","name","value","initialForm","set","pender","type","onSuccess","data","message","setLoggedInfo","setValidated","checkStatus","loggedInfo","thumbnail","logged","validated","onFailure","storage","key","object","localStorage","JSON","stringify","parse","e","remove","removeItem","Login","handleChange","AuthActions","props","target","handleLocalLogin","a","UserActions","history","toJS","push","console","log","this","placeholder","onChange","connect","auth","getIn","dispatch","bindActionCreators","authActions","userActions","Register","handleLocalRegister","validate","response","status","debounce","chechUsernameExists","isEmail","isAlphanumeric","isLength","min","max","validation","indexOf","Auth","BaseActions","path","component","baseActions","PhoneForm","setState","handleSubmit","preventDefault","onCreate","onSubmit","ADate","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","nextProps","nextState","prevProps","prevState","onUpdate","Adate","State","style","border","padding","margin","defaultProps","PhoneInfoList","list","map","warn","LogoutButton","Header","classname","Asset","information","keyword","handleCreate","concat","filter","handleUpdate","filteredList","WhiteBackground","HeaderContents","Spacer","GradientBorder","cyan","BorderedButton","LoginButton","HeaderContainer","base","App","initializeUserInfo","window","location","href","exact","Root","store","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","combineReducers","user","penderReducer","composeEnhancers","compose","createStore","modules","applyMiddleware","penderMiddleware","configureStore","process","PORT","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e4512a2.chunk.js","sourcesContent":["import { Map } from 'immutable';\r\nimport { handleActions, createAction } from 'redux-actions';\r\n\r\nconst SET_HEADER_VISIBILITY = 'base/SET_HEADER_VISIBILITY'; // 헤더 렌더링 여부 설정\r\n\r\nexport const setHeaderVisibility = createAction(SET_HEADER_VISIBILITY); // visible\r\n\r\nconst initialState = Map({\r\n    header: Map({\r\n        visible: true\r\n    })\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_HEADER_VISIBILITY]: (state, action) => state.setIn(['header', 'visible'], action.payload)\r\n}, initialState);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as baseActions from 'redux/modules/base';\r\nimport { Route } from 'react-router-dom';\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\">             \r\n                <div className=\"introduce\">\r\n                    안녕하세요 CLOUD기반 자산관리 서비스 MACGUFFIN 입니다\r\n                </div>\r\n                <div className=\"foot\">\r\n                    <div className=\"f_menu\">팀원명 | 학번 | 연락처 </div>\r\n                    <div className=\"f_content\">\r\n                        <div>\r\n                            장준표 | 2016 | --\r\n                        </div>\r\n                        <div>\r\n                            김영훈 | 2016 | --\r\n                        </div>\r\n                        <div>\r\n                            박범수 | 2018112085 | to_re@naver.com\r\n                        </div>\r\n                        <div>\r\n                            made by 박범수\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import { css, keyframes } from 'styled-components';\r\n\r\n// 미디어 쿼리 헬퍼: https://www.styled-components.com/docs/advanced#media-templates 참조\r\nexport const sizes = {\r\n    wide: '1200px',\r\n    desktop: '992px',\r\n    tablet: '768px',\r\n    phone: '376px'\r\n};\r\n\r\nexport const media = Object.keys(sizes).reduce((acc, label) => {\r\n    acc[label] = (...args) => css`\r\n        @media (max-width: ${sizes[label]}) {\r\n            ${css(...args)}\r\n        }\r\n    `;\r\n    return acc;\r\n}, {});\r\n\r\n// 그림자 효과: https://codepen.io/sdthornton/pen/wBZdXq 기반\r\nexport const shadow = (weight) => {\r\n    const shadows = [\r\n        css`box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);`,\r\n        css`box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);`,\r\n        css`box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);`,\r\n        css`box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);`,\r\n        css`box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);`\r\n    ];\r\n\r\n    return shadows[weight];\r\n};\r\n\r\nexport const transitions = {\r\n    shake: keyframes `\r\n        0% {\r\n            transform: translate(-30px);\r\n        }\r\n        25% {\r\n            transform: translate(15px);\r\n        }\r\n        50% {\r\n            transform: translate(-10px);\r\n        }\r\n        75% {\r\n            transform: translate(5px);\r\n        }\r\n        100% {\r\n            transform: translate(0px);\r\n        }\r\n    `\r\n};","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport { shadow } from 'lib/styleUtils';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// 화면의 중앙에 위치시킨다\r\nconst Positioner = styled.div`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n`;\r\n\r\n// 너비, 그림자 설정\r\nconst ShadowedBox = styled.div`\r\n    width: 500px;\r\n    ${shadow(2)}\r\n`;\r\n\r\n// 로고\r\nconst LogoWrapper = styled.div`\r\n    background: ${oc.teal[7]};\r\n    height: 5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Logo = styled(Link)`\r\n    color: white;\r\n    font-family: 'Rajdhani';\r\n    font-size: 2.4rem;\r\n    letter-spacing: 5px;\r\n    text-decoration: none;\r\n`;\r\n\r\n// children 이 들어가는 곳\r\nconst Contents = styled.div`\r\n    background: white;\r\n    padding: 2rem;\r\n    height: auto;\r\n`;\r\n\r\nconst AuthWrapper = ({children}) => (\r\n    <Positioner>\r\n        <ShadowedBox>\r\n            <LogoWrapper>\r\n                <Logo to=\"/\">MACGUFFIN</Logo>\r\n            </LogoWrapper>\r\n            <Contents>\r\n                {children}\r\n            </Contents>\r\n        </ShadowedBox>\r\n    </Positioner>\r\n);\r\n\r\nexport default AuthWrapper;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\n\r\nconst Title = styled.div`\r\n    font-size: 1.5rem;\r\n    font-weight: 500;\r\n    color: ${oc.gray[8]};\r\n    margin-bottom: 1rem;\r\n`;\r\n\r\nconst AuthContent = ({title, children}) => (\r\n    <div>\r\n        <Title>{title}</Title>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default AuthContent;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\n\r\n// 두개가 함께 있을땐 상단 (그 사이) 에 여백을 준다\r\nconst Wrapper = styled.div`\r\n    & + & {\r\n        margin-top: 1rem;\r\n    }\r\n`;\r\n\r\nconst Label = styled.div`\r\n    font-size: 1rem;\r\n    color: ${oc.gray[6]};\r\n    margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    border: 1px solid ${oc.gray[3]};\r\n    outline: none;\r\n    border-radius: 0px;\r\n    line-height: 2.5rem;\r\n    font-size: 1.2rem;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n    ::placeholder {\r\n        color: ${oc.gray[3]};\r\n    }\r\n`;\r\n\r\n// rest 쪽에는 onChange, type, name, value, placeholder 등의 input 에서 사용 하는 값들을 넣어줄수 있다.\r\nconst InputWithLabel = ({label, ...rest}) => (\r\n    <Wrapper>\r\n        <Label>{label}</Label>\r\n        <Input {...rest}/>\r\n    </Wrapper>\r\n);\r\n\r\nexport default InputWithLabel;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport { shadow } from 'lib/styleUtils';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;\r\n    padding-top: 0.6rem;\r\n    padding-bottom: 0.5rem;\r\n\r\n    background: ${oc.teal[6]};\r\n    color: white;\r\n\r\n    text-align: center;\r\n    font-size: 1.25rem;\r\n    font-weight: 500;\r\n\r\n    cursor: pointer;\r\n    user-select: none;\r\n    transition: .2s all;\r\n\r\n    &:hover {\r\n        background: ${oc.teal[5]};\r\n        ${shadow(0)}\r\n    }\r\n\r\n    &:active {\r\n        background: ${oc.teal[7]};\r\n    }\r\n\r\n`;\r\n\r\nconst AuthButton = ({children, onClick}) => (\r\n    <Wrapper onClick={onClick}>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default AuthButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Aligner = styled.div`\r\n    margin-top: 1rem;\r\n    text-align: right;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    color: ${oc.gray[6]};\r\n    &:hover {\r\n        color: ${oc.gray[7]};\r\n    }\r\n`\r\n\r\nconst RightAlignedLink = ({to, children}) => (\r\n    <Aligner>\r\n        <StyledLink to={to}>{children}</StyledLink>\r\n    </Aligner>\r\n);\r\n\r\nexport default RightAlignedLink;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport {transitions } from 'lib/styleUtils';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    color: ${oc.red[7]};\r\n    font-weight: 500;\r\n    text-align: center;\r\n    animation: ${transitions.shake} 0.3s ease-in;\r\n    animation-fill-mode: forwards;\r\n    `;\r\n\r\n const AuthError = ({children}) =>(\r\n     <Wrapper>\r\n         {children}\r\n     </Wrapper>\r\n );\r\n\r\n export default AuthError;","import axios from 'axios';\r\n\r\nexport const checkEmailExists = (email) => axios.get('/api/users' + email);\r\nexport const checkUsernameExists = (username) => axios.get('/api/users' + username);\r\n\r\nexport const localRegister = ({email, username, password}) => axios.post('/api/users', { email, username, password });\r\nexport const localLogin = ({email, password}) => axios.post('/api/users', { email, password });\r\n\r\nexport const checkStatus = () => axios.get('/api/session');\r\nexport const logout = () => axios.delete('/api/session');","import {createAction, handleActions} from 'redux-actions';\r\nimport { pender } from 'redux-pender';\r\nimport * as AuthAPI from 'lib/api/auth';\r\n\r\nimport {Map} from 'immutable';\r\n\r\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\r\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\r\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\r\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\r\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\r\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\r\n\r\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\r\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \r\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\r\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\r\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister); // { email, username, password }\r\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\r\n\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\n\r\nexport const setError = createAction(SET_ERROR); // { form, message }\r\n\r\n\r\nconst initialState = Map({\r\n    register: Map({\r\n        form: Map({\r\n            email: '',\r\n            username: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        }),\r\n        exists: Map({\r\n            email: false,\r\n            password: false\r\n        }),\r\n        error: null\r\n    }),\r\n    login: Map({\r\n        form: Map({\r\n            email: '',\r\n            password: ''\r\n        }),\r\n        error: null\r\n    }),\r\n    result: Map({})\r\n});\r\n\r\n//reducer\r\nexport default handleActions({\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const { form, name, value } = action.payload;\r\n        return state.setIn([form, 'form', name], value);\r\n    },\r\n   \r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    ...pender({\r\n        type: LOCAL_LOGIN,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_REGISTER,\r\n        onSuccess: (state, action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    [SET_ERROR]: (state, action) => {\r\n        const { form, message } =action.payload;\r\n        return state.setIn([form, 'error'], message);\r\n    }\r\n}, initialState);","import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport * as AuthAPI from 'lib/api/auth';\r\nimport {pender} from 'redux-pender';\r\n\r\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\r\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\r\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\r\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인상태 확인\r\n\r\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\r\nexport const setValidated = createAction(SET_VALIDATED); // validated\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\r\n\r\nconst initialState = Map({\r\n    loggedInfo: Map({ // 현재 로그인중인 유저의 정보\r\n        thumbnail: null,\r\n        username: null\r\n    }),\r\n    logged: false, // 현재 로그인중인지 알려준다\r\n    validated: false // 이 값은 현재 로그인중인지 아닌지 한번 서버측에 검증했음을 의미\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\r\n    [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\r\n    ...pender({\r\n        type: CHECK_STATUS,\r\n        onSuccess: (state, action) => state.set('loggedInfo', Map(action.payload.data)).set('validated', true), \r\n        onFailure: (state, action) => initialState\r\n    })\r\n}, initialState);","// 로컬 스토리지에 JSON 형태로 저장 / 불러오기 / 삭제 헬퍼\r\nconst storage = {\r\n    set: (key, object) => {\r\n        if(!localStorage) return;\r\n        localStorage[key] = (typeof object) === 'string' ? object : JSON.stringify(object);\r\n    },\r\n    get: (key) => {\r\n        if(!localStorage) return null;\r\n\r\n        if(!localStorage[key]) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const parsed = JSON.parse(localStorage[key]);\r\n            return parsed;\r\n        } catch(e) {\r\n            return localStorage[key];\r\n        }\r\n    },\r\n    remove: (key) => {\r\n        if(!localStorage) return null;\r\n\r\n        if(localStorage[key]) {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n};\r\n\r\nexport default storage;","import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as authActions from 'redux/modules/auth';\r\nimport * as userActions from 'redux/modules/user';\r\nimport storage from 'lib/storage';\r\n\r\nclass Login extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'login'\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.initializeForm('login')\r\n    }\r\n\r\n    setError = (message) => {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.setError({\r\n            form: 'login',\r\n            message\r\n        });\r\n        return false;\r\n    }\r\n\r\n    handleLocalLogin = async()=>{\r\n        const{form, AuthActions, UserActions, history}= this.props;\r\n        const {email, password} = form.toJS();\r\n\r\n        try {\r\n            await AuthActions.localLogin({password});\r\n            const loggedInfo = this.props.result.toJS();\r\n\r\n            UserActions.setLoggedInfo(loggedInfo);\r\n            history.push('/');\r\n            storage.set('loggedInfo', loggedInfo);\r\n        } catch(e) {\r\n            console.log('a');\r\n            this.setError(' 잘못된 계정정보입니다.');\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { email, password } = this.props.form.toJS(); // form 에서 email 과 password 값을 읽어옴\r\n        const { handleChange } = this;\r\n        const { error } = this.props;\r\n\r\n        return (\r\n            <AuthContent title=\"로그인\">\r\n                <InputWithLabel \r\n                    label=\"이메일\" \r\n                    name=\"email\" \r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\" \r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton onClick={this.handleLocalLogin}>로그인</AuthButton>\r\n                <RightAlignedLink to=\"/auth/register\">회원가입</RightAlignedLink>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['login', 'form']),\r\n        error: state.auth.getIn(['login','error']),\r\n        result: state.auth.get('result')\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch),\r\n        UserActions: bindActionCreators(userActions, dispatch)\r\n    })\r\n)(Login);","import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from 'components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as authActions from 'redux/modules/auth';\r\nimport * as userActions from 'redux/modules/user';\r\nimport storage from 'lib/storage';\r\nimport {isEmail, isLength, isAlphanumeric} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nclass Register extends Component {\r\n\r\n\r\n    handleLocalRegister = async() => {\r\n        const {form, AuthActions, UserActions ,error, history} = this.props;\r\n        const {email, username, password, passwordConfirm} =form.toJS();\r\n\r\n        const {validate} =this;\r\n\r\n        if(error) return; // 현재 에러가 있는 상태라면 진행하지 않음\r\n        if(!validate['email'](email)\r\n        || !validate['username'](username)\r\n        || !validate['password'](password)\r\n        || !validate['passwordConfirm'](passwordConfirm)){\r\n            // 하나라도 실패하면 진행하지 않음\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await AuthActions.localRegister({\r\n                email, username, password\r\n            });\r\n            const loggedInfo = this.props.result.toJS();\r\n            console.log(loggedInfo);\r\n            // TODO: 로그인 정보 저장 (로컬스토리지/스토어)\r\n            storage.set('loggedInfo', loggedInfo);\r\n            UserActions.setLoggedInfo(loggedInfo);\r\n            UserActions.setValidated(true);\r\n            history.push('/'); // 회원가입 성공시 홈페이지로 이동\r\n\r\n        }   catch(e){\r\n            // 에러 처리하기\r\n            if(e.response.status === 409) {\r\n                const { key } = e.response.data;\r\n                const message = key === 'email' ? '이미 존재하는 이메일입니다.': '이미 존재하는 아이디입니다.';\r\n                return this.setError(message);\r\n            }\r\n            this.setError('알 수 없는 에러가 발생했습니다.')\r\n        }\r\n    }\r\n\r\n    checkEmailExists = debounce(async (email) =>{\r\n        const {AuthActions} = this.props;\r\n        try{\r\n            await AuthActions.checkEmailExists(email);\r\n            if(this.props.exists.get('email')){\r\n                this.setError('이미 존재하는 이메일입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    checkUsernameExists = debounce(async (username) =>{\r\n        const {AuthActions} =this.props;\r\n        try{\r\n            await AuthActions.chechUsernameExists(username);\r\n            if(this.props.exists.get('username')){\r\n                this.setError('이미 존재하는 아이디입니다.');\r\n            } else {\r\n                this.setError(null);\r\n            }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }, 300)\r\n\r\n    \r\n\r\n    setError = debounce(async (message) => {\r\n        const {AuthActions} = this.props;\r\n        AuthActions.setError({\r\n            form: 'register',\r\n            message\r\n        });\r\n    }, 300)\r\n\r\n    validate = {\r\n        email: (value) =>{\r\n            if(!isEmail(value)) {\r\n                this.setError('잘못된 이메일 형식 입니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        username: (value) => {\r\n            if(!isAlphanumeric(value) || !isLength(value, {min:4, max: 15})){\r\n                this.setError('아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        password: (value) => {\r\n            if(!isLength(value, {min: 6})){\r\n                this.setError('비밀번호를 6자 이상 입력하세요.');\r\n                return false;\r\n            }\r\n            this.setError(null); // 이메일과 아이디는 에러 null처리를 중복확인부분에서 하게 됨\r\n            return true;\r\n        },\r\n        passwordConfirm: (value)=>{\r\n            if(this.props.form.get('password')!==value){\r\n                this.setError('비밀번호확인이 일치하지 않습니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'register'\r\n        });\r\n\r\n        // 검증작업 진행\r\n        const validation = this.validate[name](value);\r\n        if(name.indexOf('password')>-1||!validation) return; //비밀번호 검증이거나, 검증 실패하면 여기서 마\r\n    \r\n        // TODO: 이메일, 아이디 중복 확인\r\n        const check = name ==='email' ? this.checkEmailExists: this.chechUsernameExists; // name에 따라 이메일체크할지 아이디 체크할지 결정\r\n        check(value);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.initializeForm('register')\r\n    }\r\n    \r\n    render() {\r\n        const {error} = this.props;\r\n        const { email, username, password, passwordConfirm } = this.props.form.toJS();\r\n        const { handleChange } = this;\r\n\r\n        return (\r\n            <AuthContent title=\"회원가입\">\r\n                <InputWithLabel \r\n                    label=\"이메일\"\r\n                    name=\"email\"\r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"아이디\" \r\n                    name=\"username\" \r\n                    placeholder=\"아이디\" \r\n                    value={username} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호 확인\" \r\n                    name=\"passwordConfirm\" \r\n                    placeholder=\"비밀번호 확인\" \r\n                    type=\"password\" \r\n                    value={passwordConfirm}\r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton onClick={this.handleLocalRegister}>회원가입</AuthButton>\r\n                <RightAlignedLink to=\"/auth/login\">로그인</RightAlignedLink>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['register', 'form']),\r\n        error: state.auth.getIn(['register','error']),\r\n        exists: state.auth.getIn(['register', 'exists']),\r\n        result: state.auth.get('result')\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch),\r\n        UserActions: bindActionCreators(userActions, dispatch)\r\n    })\r\n)(Register);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as baseActions from 'redux/modules/base';\r\nimport { AuthWrapper } from 'components/Auth';\r\nimport { Route } from 'react-router-dom';\r\nimport { Login, Register } from 'containers/Auth';\r\n\r\nclass Auth extends Component {\r\n    // 페이지에 진입 할 때 헤더를 비활성화\r\n    componentWillMount() {\r\n        this.props.BaseActions.setHeaderVisibility(false);\r\n    }\r\n\r\n    // 페이지에서 벗어 날 때 다시 활성화\r\n    componentWillUnmount() {\r\n        this.props.BaseActions.setHeaderVisibility(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AuthWrapper>\r\n                <Route path=\"/auth/login\" component={Login}/>\r\n                <Route path=\"/auth/register\" component={Register}/>\r\n            </AuthWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n\r\n    }),\r\n    (dispatch) => ({\r\n        BaseActions: bindActionCreators(baseActions, dispatch)\r\n    })\r\n)(Auth);","// file: src/components/PhoneForm.js\r\nimport React, { Component } from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n    state = {\r\n        name: '',\r\n        phone: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    handleSubmit = (e) => {\r\n        // 페이지 리로딩 방지\r\n        e.preventDefault();\r\n        // 상태값을 onCreate 를 통하여 부모에게 전달\r\n        this.props.onCreate(this.state);\r\n        // 상태 초기화\r\n        this.setState({\r\n            name: '',\r\n            phone: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input\r\n                    placeholder=\"자산 이름\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                    name=\"name\"\r\n                />\r\n                <input\r\n                    placeholder=\"RFID ID\"\r\n                    value={this.state.phone}\r\n                    onChange={this.handleChange}\r\n                    name=\"phone\"\r\n                />\r\n                <input\r\n                    placeholder=\"Acquire Date\"\r\n                    value={this.state.ADate}\r\n                    onChange={this.handleChange}\r\n                    name=\"adate\"\r\n                />\r\n                \r\n                <button type=\"submit\">등록</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneForm;","// file: src/component/PhoneInfo.js\r\nimport React, {Component} from 'react';\r\n\r\nclass PhoneInfo extends Component{\r\n    static defaultProps={\r\n        info: {\r\n            name: '자산 명',\r\n            phone: '000-000-00 000',\r\n            State:'O',\r\n            ADate:'2020.06.14',\r\n            id:0\r\n        },\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n        if(!this.state.editing\r\n            && !nextState.editing\r\n            && nextProps.info === this.props.info) {\r\n                return false;\r\n            }\r\n            // 나머지 경우엔 리렌더링 함\r\n            return true;\r\n    }\r\n\r\n    state = {\r\n        // 우리는 수정 버튼을 눌렀을 때 editing  값을 true로 설정해줄 것입니다.\r\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n        // input 형태로 보여주게 됩니다.\r\n        editing: false,\r\n        // input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n        // 설정합니다.\r\n        name: '',\r\n        phone: '',\r\n    }\r\n\r\n    handleRemove = () =>{\r\n        // 삭제 버튼이 클릭되면 onRemove에 id 넣어서 호출\r\n        const {info, onRemove } = this.props;\r\n        onRemove(info.id);\r\n    }\r\n\r\n    // editing 값을 반전시키는 함수입니다\r\n    // true -> false, false -> true\r\n    handleToggleEdit = () => {\r\n        const { editing } = this.state;\r\n        this.setState({editing: !editing});\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n        // 수정을 눌렀을 땐, 기존의 값이 input에 나타나고,\r\n        // 수정을 적용할 땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n        const {info, onUpdate} = this.props;\r\n        if(!prevState.editing && this.state.editing){\r\n            // editing 값이 false -> true 로 전환 될 때\r\n            // info 의 값을 state에 넣어준다\r\n            this.setState({\r\n                name: info.name,\r\n                phone: info.phone,\r\n                Adate: info.ADate,\r\n                State: info.State\r\n            })\r\n        }\r\n\r\n        if (prevState.editing && !this.state.editing){\r\n            // editing 값이 true->false로 전환 될 때\r\n            onUpdate(info.id, {\r\n                name: this.state.name,\r\n                phone: this.state.phone,\r\n                Adate: this.state.ADate,\r\n                State: this.state.State\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log('render PhoneInfo '+ this.props.info.id)\r\n        const style={\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        };\r\n\r\n        const {editing} = this.state;\r\n\r\n        if(editing){ // 수정모드\r\n            return(\r\n                <div style={style}>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.name}\r\n                            name=\"name\"\r\n                            placeholder=\"이름\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.phone}\r\n                            name=\"phone\"\r\n                            placeholder=\"전화번호\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.State}\r\n                            name=\"State\"\r\n                            placeholder=\"보유상태\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.ADate}\r\n                            name=\"ADate\"\r\n                            placeholder=\"획득날짜\"\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                    <button onClick={this.handleToggleEdit}>적용</button>\r\n                    <button onClick={this.handleRemove}>삭제</button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // 일반모드\r\n        const{\r\n            name, phone, State, ADate\r\n        } = this.props.info;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>Asset Name: {name}</b></div>\r\n                <div><b>Asset ID: {phone}</b></div>\r\n                <div>Asset State: {State}</div>\r\n                <div>AcquiredDate: {ADate} </div>\r\n                <button onClick={this.handleToggleEdit}>수정</button>\r\n                <button onClick={this.handleRemove}>삭제</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;","// src/components/PhoneInfoList.js\r\nimport React, {Component} from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component{\r\n    static defaultProps = {\r\n        list: [],\r\n        onRemove: () => console.warn('onRemove not defined'),\r\n        onUpdate: () => console.warn('onUpdate not defined'),\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return nextProps.data !== this.props.data;\r\n    }\r\n\r\n    render() {\r\n        console.log('render PhoneInfoList');\r\n\r\n\r\n        const {data, onRemove, onUpdate }=this.props;\r\n        const list = data.map(\r\n            info => (\r\n            <PhoneInfo \r\n            key={info.id} \r\n            info={info}\r\n            onRemove={onRemove}\r\n            onUpdate={onUpdate}/>)\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {list}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfoList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './LogoutButton.css';\r\n\r\nconst LogoutButton = () => (\r\n    <button className=\"BorderedButton\">\r\n        로그아웃\r\n    </button>\r\n);\r\n\r\nexport default LogoutButton;","// file: src/components/Header.js\r\nimport React, { Component } from 'react';\r\nimport './Header.css';\r\nimport './LogoutButton';\r\nimport LogoutButton from './LogoutButton';\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        name: '',\r\n        phone: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    handleSubmit = (e) => {\r\n        // 페이지 리로딩 방지\r\n        e.preventDefault();\r\n        // 상태값을 onCreate 를 통하여 부모에게 전달\r\n        this.props.onCreate(this.state);\r\n        // 상태 초기화\r\n        this.setState({\r\n            name: '',\r\n            phone: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Positioner\">\r\n            <div className=\"WhiteBackground\">\r\n                <div className=\"HeaderContents\">\r\n                    <div className=\"Logo\">MACGUFFIN</div>\r\n                    <div className=\"button\">\r\n                    <LogoutButton/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div classname=\"GradientBorder\"></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PhoneForm from './PhoneForm';\r\nimport PhoneInfoList from './PhoneInfoList';\r\nimport Header from './Header';\r\n\r\n\r\nclass Asset extends Component {\r\n  id = 2\r\n  state={\r\n    information: [\r\n    {\r\n      id: 0,\r\n      name: 'APPLE MacBook Pro 13형',\r\n      phone: '000-000-00-000',\r\n      State: 'O',\r\n      ADate: '2020-06-14'\r\n    },\r\n    {\r\n      id:1,\r\n      name: 'APPLE 21.5형 iMac',\r\n      phone: '000-000-00-001',\r\n      State: 'O',\r\n      ADate: '2020-06-10'\r\n    },\r\n    {\r\n      id:2,\r\n      name: 'I Phone SE2 64G',\r\n      phone: '000-000-00-002',\r\n      State: 'X',\r\n      ADate: '2020-06-05'\r\n    }\r\n  ],\r\n  keyword: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  }\r\n  handleCreate = (data) =>{\r\n    const {information} =this.state;\r\n    this.setState({\r\n      information: information.concat({id: this.id++, ...data})\r\n    })\r\n  }\r\n  handleRemove = (id) => {\r\n    const {information} = this.state;\r\n    this.setState({\r\n      information: information.filter(info=>info.id !== id)\r\n    })\r\n  }\r\n  handleUpdate = (id,data)=>{\r\n    const {information} = this.state;\r\n    this.setState({\r\n      information: information.map(\r\n        info => id === info.id?\r\n        {...info, ...data} // 새 객체를 만들어서 기존의 값과 전달받은 data를 덮어씀\r\n        : info // 기존의 값을 그대로 유지\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { information, keyword}=this.state;\r\n    const filteredList = information.filter(\r\n      info => info.name.indexOf(keyword) !== -1\r\n    );\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <PhoneForm \r\n          onCreate={this.handleCreate}\r\n        />\r\n        <p>\r\n          <input\r\n            placeholder=\"검색 할 자산을 입력하세요..\"\r\n            onChange={this.handleChange}\r\n            value={keyword}\r\n            />\r\n        </p>\r\n        <hr/>\r\n        <div id=\"Asset\"><b>&nbsp;&nbsp;관리중인 ASSET</b></div>\r\n         \r\n        <PhoneInfoList \r\n          data={filteredList}\r\n          onRemove={this.handleRemove}\r\n          onUpdate={this.handleUpdate}/>\r\n          \r\n        {/* <hr/>\r\n        <div>\r\n        <Login/>\r\n        </div>\r\n        <hr/>\r\n        \r\n        <div>\r\n        <Signup/>\r\n        </div> */}\r\n        </div>\r\n      \r\n\r\n        \r\n      \r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Asset;","import React, { Component } from 'react';\r\nimport Asset from 'components/Asset/Asset';\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>             \r\n               <Asset/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport { Link } from 'react-router-dom';\r\nimport { shadow, media } from 'lib/styleUtils';\r\n\r\n// 상단 고정, 그림자\r\nconst Positioner = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: fixed;\r\n    top: 0px;\r\n    width: 100%;\r\n    ${shadow(1)}\r\n`;\r\n\r\n// 흰 배경, 내용 중간 정렬\r\nconst WhiteBackground = styled.div`\r\n    background: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    height: auto;\r\n`;\r\n\r\n// 해더의 내용\r\nconst HeaderContents = styled.div`\r\n    width: 1200px;\r\n    height: 55px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    ${media.wide`\r\n        width: 992px;\r\n    `}\r\n\r\n    ${media.tablet`\r\n        width: 100%;\r\n    `}\r\n`;\r\n\r\n// 로고\r\nconst Logo = styled.div`\r\n    font-size: 1.4rem;\r\n    letter-spacing: 2px;\r\n    color: ${oc.teal[7]};\r\n    font-family: 'Rajdhani';\r\n`;\r\n\r\n// 중간 여백\r\nconst Spacer = styled.div`\r\n    flex-grow: 1;\r\n`;\r\n\r\n// 하단 그래디언트 테두리\r\nconst GradientBorder = styled.div`\r\n    height: 3px;\r\n    background: linear-gradient(to right, ${oc.teal[6]}, ${oc.cyan[5]});\r\n`;\r\n\r\nconst Header = ({children}) => {\r\n    return (\r\n        <Positioner>\r\n            <WhiteBackground>\r\n                <HeaderContents>\r\n                    <Logo to=\"/\" >Macguffin</Logo>\r\n                    <Spacer/>\r\n                    {children}\r\n                </HeaderContents>\r\n            </WhiteBackground>\r\n            <GradientBorder/>\r\n        </Positioner>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport oc from 'open-color';\r\nimport { Link } from 'react-router-dom';\r\nimport { shadow } from 'lib/styleUtils';\r\n\r\nconst BorderedButton = styled(Link)`\r\n    font-weight: 600;\r\n    color: ${oc.cyan[6]};\r\n    border: 1px solid ${oc.cyan[6]};\r\n    padding: 0.5rem;\r\n    padding-bottom: 0.4rem;\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n    text-decoration: none;\r\n    transition: .2s all;\r\n\r\n    &:hover {\r\n        background: ${oc.cyan[6]};\r\n        color: white;\r\n        ${shadow(1)}\r\n    }\r\n\r\n    &:active {\r\n        /* 마우스 클릭시 아래로 미세하게 움직임 */\r\n        transform: translateY(3px);\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst LoginButton = () => (\r\n    <BorderedButton to=\"/auth/login\">\r\n        로그인 / 가입\r\n    </BorderedButton>\r\n);\r\n\r\nexport default LoginButton;","import React, { Component } from 'react';\r\nimport Header from 'components/Base/Header/Header';\r\nimport LoginButton from 'components/Base/Header/LoginButton';\r\nimport { connect } from 'react-redux';\r\n\r\nclass HeaderContainer extends Component {\r\n    render() {\r\n        const { visible } = this.props;\r\n        if(!visible) return null;\r\n\r\n        return (\r\n            <Header>\r\n                <LoginButton/>\r\n            </Header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        visible: state.base.getIn(['header', 'visible'])\r\n    }),\r\n    (dispatch) => ({\r\n\r\n    })\r\n)(HeaderContainer);","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Home, Auth, Asset } from 'pages';\nimport HeaderContainer from 'containers/Base/HeaderContainer';\n\nimport storage from 'lib/storage';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as userActions from 'redux/modules/user';\n\n\nclass App extends Component {\n\n    initializeUserInfo = async () => {\n        const loggedInfo = storage.get('loggedInfo'); // 로그인 정보를 로컬스토리지에서 가져옵니다.\n        if(!loggedInfo) return; // 로그인 정보가 없다면 여기서 멈춥니다.\n        const { UserActions } = this.props;\n        UserActions.setLoggedInfo(loggedInfo);\n        try {\n            await UserActions.checkStatus();\n        } catch (e) {\n            storage.remove('loggedInfo');\n            window.location.href = '/auth/login?expired';\n        }\n        window.location.href='/asset';         \n    }\n\n    componentDidMount() {\n        this.initializeUserInfo();\n    }\n\n    render() {\n        return (\n            <div>\n                <HeaderContainer/>\n                <Route exact path=\"/\" component={Home}/>\n                <Route path=\"/auth\" component={Auth}/>\n                <Route path=\"/asset_debug\" component={Asset}/>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        UserActions: bindActionCreators(userActions, dispatch)\n    })\n)(App);","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst Root = ({store}) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <Route path=\"/\" component={App}/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport base from './base';\r\nimport auth from './auth';\r\nimport user from './user';\r\n\r\nimport { penderReducer } from 'redux-pender';\r\n\r\nexport default combineReducers({\r\n    base,\r\n    auth,\r\n    user,\r\n    pender: penderReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport penderMiddleware from 'redux-pender';\r\nimport modules from './modules';\r\n\r\nconst isDevelopment = process.env.NODE_ENV === 'development'; // 환경이 개발모드인지 확인합니다\r\nconst composeEnhancers = isDevelopment ? (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose) : compose;\r\n\r\n\r\n// Todo: 미들웨어 적용\r\nconst configureStore = (initialState) => {\r\n    const store = createStore(modules, initialState, composeEnhancers(\r\n        applyMiddleware(penderMiddleware())\r\n    ));\r\n    \r\n    return store;\r\n}\r\n\r\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport configureStore from 'redux/configureStore';\n\nconst store = configureStore();\n\n\nconst port = process.env.PORT || 4000; // PORT 값이 설정되어있지 않다면 4000 을 사용합니다.\n\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}